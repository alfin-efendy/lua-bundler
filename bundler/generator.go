package bundler

import (
	"fmt"
	"regexp"
	"strings"
)

// generateBundle creates the final bundled output
func (b *Bundler) generateBundle(mainContent string) string {
	var output strings.Builder

	output.WriteString("-- Bundled Lua Script\n")
	output.WriteString("-- Generated by Lua Bundler\n")
	output.WriteString("-- https://github.com/alfin-efendy/lua-bundler\n\n")

	// Generate EmbeddedModules table
	output.WriteString("local EmbeddedModules = {}\n\n")

	// Add all modules
	for path, content := range b.modules {
		output.WriteString(fmt.Sprintf("-- Module: %s\n", path))
		output.WriteString(fmt.Sprintf("EmbeddedModules[\"%s\"] = function()\n", escapeString(path)))

		// Indent content
		lines := strings.Split(content, "\n")
		for _, line := range lines {
			if strings.TrimSpace(line) != "" {
				output.WriteString("    " + line + "\n")
			} else {
				output.WriteString("\n")
			}
		}

		output.WriteString("end\n\n")
	}

	// Add loadModule function
	output.WriteString("-- Load module helper function\n")
	output.WriteString("local function loadModule(url)\n")
	output.WriteString("    -- Try embedded module first\n")
	output.WriteString("    if EmbeddedModules[url] then\n")
	output.WriteString("        return EmbeddedModules[url]()\n")
	output.WriteString("    end\n")
	output.WriteString("    \n")
	output.WriteString("    -- Fallback to original require\n")
	output.WriteString("    return require(url)\n")
	output.WriteString("end\n\n")

	// Replace require() and loadstring() in main content
	processedMain := b.replaceModuleCalls(mainContent)

	output.WriteString("-- Main Script\n")
	output.WriteString(processedMain)

	return output.String()
}

// replaceModuleCalls replaces require() and loadstring() calls with loadModule() calls
func (b *Bundler) replaceModuleCalls(content string) string {
	requireRegex := regexp.MustCompile(`require\s*\(\s*['"]([^'"]+)['"]\s*\)`)
	httpGetRegex := regexp.MustCompile(`loadstring\s*\(\s*game:HttpGet\s*\(\s*['"]([^'"]+)['"]\s*\)\s*\)\s*\(\s*\)`)

	processedContent := content

	// Replace loadstring(game:HttpGet(...))()
	processedContent = httpGetRegex.ReplaceAllStringFunc(processedContent, func(match string) string {
		matches := httpGetRegex.FindStringSubmatch(match)
		if len(matches) > 1 {
			url := matches[1]
			return fmt.Sprintf("loadModule(\"%s\")", escapeString(url))
		}
		return match
	})

	// Replace require() for local files
	processedContent = requireRegex.ReplaceAllStringFunc(processedContent, func(match string) string {
		matches := requireRegex.FindStringSubmatch(match)
		if len(matches) > 1 {
			modulePath := matches[1]
			if b.isLocalModule(modulePath) {
				return fmt.Sprintf("loadModule(\"%s\")", escapeString(modulePath))
			}
		}
		return match
	})

	return processedContent
}

// escapeString escapes special characters in strings for Lua
func escapeString(s string) string {
	s = strings.ReplaceAll(s, "\\", "\\\\")
	s = strings.ReplaceAll(s, "\"", "\\\"")
	return s
}
