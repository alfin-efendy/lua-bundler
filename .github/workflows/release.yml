name: Release & Publish

on:
  push:
    tags: [ 'v*' ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'
      skip_ci_wait:
        description: 'Skip CI wait (use only if CI is stuck or already passed)'
        required: false
        default: 'false'
        type: boolean

env:
  GO_VERSION: '1.24'
  BINARY_NAME: lua-bundler

jobs:
  # Wait for CI pipeline to pass
  wait-for-ci:
    name: Wait for CI Pipeline
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_ci_wait != 'true')
    steps:
    - uses: actions/checkout@v5
    
    - name: Wait for CI workflow to complete
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-ci
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: CI Pipeline
        ref: ${{ github.sha }}
        timeoutSeconds: 1800  # 30 minutes timeout
        intervalSeconds: 30
      continue-on-error: true

    - name: Check CI result with fallback
      run: |
        if [ "${{ steps.wait-for-ci.outputs.conclusion }}" = "success" ]; then
          echo "✅ CI Pipeline passed successfully"
          exit 0
        elif [ "${{ steps.wait-for-ci.outputs.conclusion }}" = "" ]; then
          echo "⚠️ CI Pipeline check failed, but continuing with release"
          echo "This might happen if the CI workflow name changed or there are connectivity issues"
          exit 0
        else
          echo "❌ CI Pipeline failed or was cancelled"
          echo "CI Status: ${{ steps.wait-for-ci.outputs.conclusion }}"
          echo "❌ Cannot proceed with release when CI explicitly failed"
          exit 1
        fi

  # Build binaries for release
  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [wait-for-ci]
    if: always() && (needs.wait-for-ci.result == 'success' || github.event_name != 'push')
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
          - goos: windows
            goarch: arm64
            suffix: ".exe"

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${{ github.event.release.tag_name }}
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.tag }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_PATH="dist/${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        go build -a -installsuffix cgo -ldflags "-X main.Version=${{ steps.version.outputs.version }} -s -w" -o "$BINARY_PATH" .
        
        # Create checksums
        cd dist
        sha256sum "${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}" > "${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}.sha256"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
          dist/${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.sha256

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [wait-for-ci, build-release]
    if: always() && (needs.wait-for-ci.result == 'success' || github.event_name != 'push') && needs.build-release.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag }}
    steps:
    - uses: actions/checkout@v5

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        for dir in artifacts/*/; do
          cp -r "$dir"* release/
        done
        ls -la release/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      if: github.event_name != 'release'  # Only create if not already a release event
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.tag }}
        files: release/*
        body: |
          ## What's Changed
          
          See the [CHANGELOG](CHANGELOG.md) for detailed changes.
          
          ## Installation
          
          ### Direct Download
          Download the appropriate binary for your platform from the assets below.
          
          ### Package Managers
          - **Homebrew**: `brew install alfin-efendy/tap/lua-bundler`
          - **Winget**: `winget install alfin-efendy.lua-bundler`
          - **APT**: `curl -fsSL https://alfin-efendy.github.io/lua-bundler/install.sh | sudo bash`
          
          ## Checksums
          
          Verify your download with the provided `.sha256` files.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload assets to existing release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Trigger package manager publications
  trigger-publications:
    name: Trigger Package Publications
    needs: [wait-for-ci, build-release, github-release]
    if: always() && (needs.wait-for-ci.result == 'success' || github.event_name != 'push') && needs.build-release.result == 'success' && needs.github-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Get release info
      id: release_info
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Trigger APT Repository Update
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: apt-publish
        client-payload: '{"tag": "${{ steps.release_info.outputs.tag }}"}'

    - name: Trigger Homebrew Update
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: homebrew-publish
        client-payload: '{"tag": "${{ steps.release_info.outputs.tag }}"}'

    - name: Trigger Winget Update
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: winget-publish
        client-payload: '{"tag": "${{ steps.release_info.outputs.tag }}"}'

    - name: Summary
      run: |
        echo "## 🚀 Release ${{ steps.release_info.outputs.tag }} Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Prerequisites" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "- ✅ **CI Pipeline**: Passed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ℹ️ **CI Pipeline**: Skipped (manual trigger)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- ✅ **Build**: All platforms completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **GitHub Release**: Created with assets" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Managers" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 **APT Repository**: Updating..." >> $GITHUB_STEP_SUMMARY
        echo "- 🍺 **Homebrew**: Updating..." >> $GITHUB_STEP_SUMMARY
        echo "- 📦 **Winget**: Updating..." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Monitor Progress" >> $GITHUB_STEP_SUMMARY
        echo "- [APT Repository Workflow](https://github.com/${{ github.repository }}/actions/workflows/apt-repository.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- [Homebrew Workflow](https://github.com/${{ github.repository }}/actions/workflows/homebrew-publish.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- [Winget Workflow](https://github.com/${{ github.repository }}/actions/workflows/winget-publish.yml)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# APT (Ubuntu/Debian)" >> $GITHUB_STEP_SUMMARY
        echo "curl -fsSL https://alfin-efendy.github.io/lua-bundler/install.sh | sudo bash" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Homebrew (macOS/Linux)" >> $GITHUB_STEP_SUMMARY
        echo "brew install alfin-efendy/tap/lua-bundler" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Winget (Windows)" >> $GITHUB_STEP_SUMMARY
        echo "winget install alfin-efendy.lua-bundler" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY