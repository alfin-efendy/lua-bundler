name: Publish APT Repository

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  BINARY_NAME: lua-bundler

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-deb-and-publish:
    name: Build Debian Package and Update APT Repository
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    # Checkout gh-pages branch for APT repository
    - name: Checkout gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: apt-repo
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup APT repository structure
      run: |
        cd apt-repo
        mkdir -p {dists/stable/main/binary-amd64,dists/stable/main/binary-arm64,pool/main/l/${{ env.BINARY_NAME }}}
        
        # Create basic structure if not exists
        if [ ! -f "dists/stable/Release" ]; then
          mkdir -p dists/stable/main/binary-{amd64,arm64}
        fi

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Get or build binaries
      run: |
        if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
          echo "Downloading release binaries..."
          # Download Linux binaries from release
          curl -L -o ${{ env.BINARY_NAME }}-amd64 \
            "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-linux-amd64" || {
            echo "Failed to download from release, building locally..."
            GOOS=linux GOARCH=amd64 go build -o ${{ env.BINARY_NAME }}-amd64 .
          }
          curl -L -o ${{ env.BINARY_NAME }}-arm64 \
            "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-linux-arm64" || {
            echo "Failed to download from release, building locally..."
            GOOS=linux GOARCH=arm64 go build -o ${{ env.BINARY_NAME }}-arm64 .
          }
        else
          echo "Building binaries locally..."
          # Build locally for manual workflow dispatch
          GOOS=linux GOARCH=amd64 go build -o ${{ env.BINARY_NAME }}-amd64 .
          GOOS=linux GOARCH=arm64 go build -o ${{ env.BINARY_NAME }}-arm64 .
        fi
        
        chmod +x ${{ env.BINARY_NAME }}-*
        ls -la ${{ env.BINARY_NAME }}-*

    - name: Get version
      id: version
      run: |
        # Get version from release tag or latest git tag
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          # For workflow_dispatch, get latest tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        fi
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        
        # Validate version is not empty
        if [ -z "$VERSION" ] || [ "$VERSION" = "" ]; then
          echo "Error: Version is empty, using default"
          VERSION="1.0.0"
        fi
        
        echo "Detected version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create AMD64 Debian package
      run: |
        # Debug: Print version information
        echo "Event name: ${{ github.event_name }}"
        echo "Release tag: ${{ github.event.release.tag_name }}"
        echo "Version from step: ${{ steps.version.outputs.version }}"
        
        VERSION="${{ steps.version.outputs.version }}"
        if [ -z "$VERSION" ]; then
          echo "❌ ERROR: Version is empty!"
          exit 1
        fi
        
        PKG_DIR="${{ env.BINARY_NAME }}_${VERSION}_amd64"
        echo "Creating package directory: $PKG_DIR"
        
        mkdir -p "$PKG_DIR/DEBIAN"
        mkdir -p "$PKG_DIR/usr/bin"
        mkdir -p "$PKG_DIR/usr/share/man/man1"
        mkdir -p "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}"

        # Copy AMD64 binary
        cp ${{ env.BINARY_NAME }}-amd64 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"

        # Create control file
        cat > "$PKG_DIR/DEBIAN/control" << EOF
        Package: ${{ env.BINARY_NAME }}
        Version: ${{ steps.version.outputs.version }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.17)
        Maintainer: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
        Description: Lua script bundler for Roblox development
         A tool for bundling Lua scripts with dependency resolution,
         specifically designed for Roblox script development.
         Supports both local requires and HTTP loadstring patterns.
        Homepage: https://github.com/${{ github.repository }}
        EOF

        # Create postinst script
        cat > "$PKG_DIR/DEBIAN/postinst" << 'EOF'
        #!/bin/bash
        set -e
        chmod +x /usr/bin/${{ env.BINARY_NAME }}
        echo "lua-bundler installed successfully!"
        echo "Usage: lua-bundler -entry main.lua -output bundle.lua"
        EOF
        chmod 755 "$PKG_DIR/DEBIAN/postinst"

        # Create copyright file
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: ${{ env.BINARY_NAME }}
        Source: https://github.com/${{ github.repository }}

        Files: *
        Copyright: $(date +%Y) ${{ github.repository_owner }}
        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a
         copy of this software and associated documentation files (the "Software"),
         to deal in the Software without restriction, including without limitation
         the rights to use, copy, modify, merge, publish, distribute, sublicense,
         and/or sell copies of the Software, and to permit persons to whom the
         Software is furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included
         in all copies or substantial portions of the Software.
        EOF

        # Create changelog
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian" << EOF
        ${{ env.BINARY_NAME }} (${{ steps.version.outputs.version }}) stable; urgency=medium

          * Release ${{ steps.version.outputs.version }}
          * See https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}

         -- ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>  $(date -R)
        EOF

        # Compress changelog
        gzip -9 "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"

        # Build AMD64 package
        dpkg-deb --build --root-owner-group "$PKG_DIR"

    - name: Create ARM64 Debian package
      run: |
        # Debug: Verify version again
        VERSION="${{ steps.version.outputs.version }}"
        echo "ARM64 package version: $VERSION"
        
        if [ -z "$VERSION" ]; then
          echo "❌ ERROR: Version is empty for ARM64 package!"
          exit 1
        fi
        
        PKG_DIR="${{ env.BINARY_NAME }}_${VERSION}_arm64"
        echo "Creating ARM64 package directory: $PKG_DIR"
        
        mkdir -p "$PKG_DIR/DEBIAN"
        mkdir -p "$PKG_DIR/usr/bin"
        mkdir -p "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}"

        # Copy ARM64 binary
        cp ${{ env.BINARY_NAME }}-arm64 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"

        # Create control file (ARM64)
        cat > "$PKG_DIR/DEBIAN/control" << EOF
        Package: ${{ env.BINARY_NAME }}
        Version: ${{ steps.version.outputs.version }}
        Section: utils
        Priority: optional
        Architecture: arm64
        Depends: libc6 (>= 2.17)
        Maintainer: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
        Description: Lua script bundler for Roblox development
         A tool for bundling Lua scripts with dependency resolution,
         specifically designed for Roblox script development.
         Supports both local requires and HTTP loadstring patterns.
        Homepage: https://github.com/${{ github.repository }}
        EOF

        # Create postinst script
        cat > "$PKG_DIR/DEBIAN/postinst" << 'EOF'
        #!/bin/bash
        set -e
        chmod +x /usr/bin/${{ env.BINARY_NAME }}
        echo "lua-bundler installed successfully!"
        echo "Usage: lua-bundler -entry main.lua -output bundle.lua"
        EOF
        chmod 755 "$PKG_DIR/DEBIAN/postinst"

        # Copy documentation
        cp -r ${{ env.BINARY_NAME }}_${{ steps.version.outputs.version }}_amd64/usr/share/doc/${{ env.BINARY_NAME }}/* \
           "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/"

        # Build ARM64 package
        dpkg-deb --build --root-owner-group "$PKG_DIR"

    - name: Move packages to repository
      run: |
        # Move packages to pool
        mv ${{ env.BINARY_NAME }}_${{ steps.version.outputs.version }}_amd64.deb \
           apt-repo/pool/main/l/${{ env.BINARY_NAME }}/
        mv ${{ env.BINARY_NAME }}_${{ steps.version.outputs.version }}_arm64.deb \
           apt-repo/pool/main/l/${{ env.BINARY_NAME }}/

    - name: Generate repository metadata
      run: |
        cd apt-repo

        # Install required tools
        sudo apt-get update
        sudo apt-get install -y apt-utils gpg

        # Remove existing Packages files to avoid conflicts
        rm -f dists/stable/main/binary-amd64/Packages*
        rm -f dists/stable/main/binary-arm64/Packages*
        
        # Generate Packages files
        dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
        dpkg-scanpackages --arch arm64 pool/ > dists/stable/main/binary-arm64/Packages
        
        # Compress Packages files (force overwrite if exists)
        gzip -9f dists/stable/main/binary-amd64/Packages
        gzip -9f dists/stable/main/binary-arm64/Packages
        
        # Also create uncompressed versions for compatibility
        gunzip -c dists/stable/main/binary-amd64/Packages.gz > dists/stable/main/binary-amd64/Packages
        gunzip -c dists/stable/main/binary-arm64/Packages.gz > dists/stable/main/binary-arm64/Packages

        # Create Release file
        cat > dists/stable/Release << EOF
        Origin: ${{ github.repository_owner }}
        Label: ${{ github.repository_owner }}'s APT Repository
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64 arm64
        Components: main
        Description: APT repository for ${{ env.BINARY_NAME }} and other packages
        Date: $(date -Ru)
        EOF

        # Generate checksums for Release file
        cd dists/stable
        {
          echo "MD5Sum:"
          find . -name "Packages*" -type f -exec md5sum {} \; | sed 's|./| |'
          echo "SHA1:"
          find . -name "Packages*" -type f -exec sha1sum {} \; | sed 's|./| |'
          echo "SHA256:"
          find . -name "Packages*" -type f -exec sha256sum {} \; | sed 's|./| |'
        } >> Release

    - name: Create repository index page
      run: |
        cd apt-repo
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{{ env.BINARY_NAME }} APT Repository</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .header { text-align: center; margin-bottom: 40px; }
                .install-box { background: #f6f8fa; padding: 20px; border-radius: 6px; margin: 20px 0; }
                .install-box code { background: #fff; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; }
                .package-list { margin: 20px 0; }
                .package-item { padding: 10px; border: 1px solid #e1e4e8; border-radius: 6px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🏗️ {{ env.BINARY_NAME }} APT Repository</h1>
                <p>Debian/Ubuntu packages for lua-bundler</p>
            </div>

            <div class="install-box">
                <h2>📦 Installation</h2>
                <p><strong>Step 1:</strong> Add the repository</p>
                <code>echo "deb [trusted=yes] https://{{ github.repository_owner }}.github.io/{{ github.event.repository.name }}/ stable main" | sudo tee /etc/apt/sources.list.d/lua-bundler.list</code>
                
                <p><strong>Step 2:</strong> Update package list</p>
                <code>sudo apt update</code>
                
                <p><strong>Step 3:</strong> Install lua-bundler</p>
                <code>sudo apt install lua-bundler</code>
            </div>

            <div class="package-list">
                <h2>📋 Available Packages</h2>
                <div class="package-item">
                    <h3>lua-bundler</h3>
                    <p>Lua script bundler for Roblox development</p>
                    <p><strong>Architectures:</strong> amd64, arm64</p>
                    <p><strong>Latest Version:</strong> {{ steps.version.outputs.version }}</p>
                </div>
            </div>

            <div class="install-box">
                <h2>🔗 Links</h2>
                <ul>
                    <li><a href="https://github.com/{{ github.repository }}">GitHub Repository</a></li>
                    <li><a href="https://github.com/{{ github.repository }}/releases">Releases</a></li>
                    <li><a href="https://github.com/{{ github.repository }}/issues">Issues</a></li>
                </ul>
            </div>

            <div class="install-box">
                <h2>📁 Repository Structure</h2>
                <ul>
                    <li><a href="dists/">dists/</a> - Distribution metadata</li>
                    <li><a href="pool/">pool/</a> - Package files</li>
                </ul>
            </div>

            <footer style="text-align: center; margin-top: 40px; color: #666;">
                <p>Updated: $(date)</p>
                <p>Generated automatically by GitHub Actions</p>
            </footer>
        </body>
        </html>
        EOF

        # Replace template variables
        sed -i "s|{{ env.BINARY_NAME }}|${{ env.BINARY_NAME }}|g" index.html
        sed -i "s|{{ github.repository_owner }}|${{ github.repository_owner }}|g" index.html
        sed -i "s|{{ github.event.repository.name }}|${{ github.event.repository.name }}|g" index.html
        sed -i "s|{{ github.repository }}|${{ github.repository }}|g" index.html
        sed -i "s|{{ steps.version.outputs.version }}|${{ steps.version.outputs.version }}|g" index.html

    - name: Commit and push to gh-pages
      run: |
        cd apt-repo
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Configure git to use token
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Add all files
        git add -A
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update APT repository - Release ${{ github.event.release.tag_name }}"
          git push
        fi

    - name: Enable GitHub Pages
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.repos.createPagesSite({
              owner: context.repo.owner,
              repo: context.repo.repo,
              source: {
                branch: 'gh-pages',
                path: '/'
              }
            });
          } catch (error) {
            // Pages might already be enabled
            console.log('GitHub Pages might already be enabled:', error.message);
          }

    - name: Summary
      run: |
        echo "## 📦 APT Repository Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation:** " >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo 'echo "deb [trusted=yes] https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ stable main" | sudo tee /etc/apt/sources.list.d/lua-bundler.list' >> $GITHUB_STEP_SUMMARY
        echo 'sudo apt update' >> $GITHUB_STEP_SUMMARY
        echo 'sudo apt install lua-bundler' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Packages added:**" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ env.BINARY_NAME }} v${{ steps.version.outputs.version }} (amd64)" >> $GITHUB_STEP_SUMMARY
        echo "- ${{ env.BINARY_NAME }} v${{ steps.version.outputs.version }} (arm64)" >> $GITHUB_STEP_SUMMARY