name: Package Publishing

on:
  release:
    types: [published]

env:
  BINARY_NAME: lua-bundler

jobs:
  # Publish to Homebrew
  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: ${{ env.BINARY_NAME }}
        formula-path: Formula/${{ env.BINARY_NAME }}.rb
        homebrew-tap: alfin-efendy/homebrew-tap
        base-branch: main
        download-url: https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-darwin-amd64
        commit-message: |
          ${{ env.BINARY_NAME }} ${{ github.event.release.tag_name }}

          Created by ${{ github.event.sender.login }}
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  # Create Debian package and publish to APT repository
  debian:
    name: Build and Publish Debian Package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - uses: actions/checkout@v4

    - name: Download Linux AMD64 binary
      run: |
        curl -L -o ${{ env.BINARY_NAME }} \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-linux-amd64"
        chmod +x ${{ env.BINARY_NAME }}

    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Debian package structure
      run: |
        PKG_DIR="${{ env.BINARY_NAME }}_${{ steps.version.outputs.version }}"
        mkdir -p "$PKG_DIR/DEBIAN"
        mkdir -p "$PKG_DIR/usr/bin"
        mkdir -p "$PKG_DIR/usr/share/man/man1"
        mkdir -p "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}"

        # Copy binary
        cp ${{ env.BINARY_NAME }} "$PKG_DIR/usr/bin/"

        # Create control file
        cat > "$PKG_DIR/DEBIAN/control" << EOF
        Package: ${{ env.BINARY_NAME }}
        Version: ${{ steps.version.outputs.version }}
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.17)
        Maintainer: ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>
        Description: Lua script bundler for Roblox development
         A tool for bundling Lua scripts with dependency resolution,
         specifically designed for Roblox script development.
         Supports both local requires and HTTP loadstring patterns.
        Homepage: https://github.com/${{ github.repository }}
        EOF

        # Create copyright file
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: ${{ env.BINARY_NAME }}
        Source: https://github.com/${{ github.repository }}

        Files: *
        Copyright: $(date +%Y) ${{ github.repository_owner }}
        License: MIT
        EOF

        # Create changelog
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian" << EOF
        ${{ env.BINARY_NAME }} (${{ steps.version.outputs.version }}) unstable; urgency=medium

          * Release ${{ steps.version.outputs.version }}
          * See https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}

         -- ${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>  $(date -R)
        EOF

        # Compress changelog
        gzip -9 "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"

        # Build package
        dpkg-deb --build "$PKG_DIR"

        # Create repository structure
        mkdir -p apt-repo/pool/main/l/${{ env.BINARY_NAME }}
        cp "${PKG_DIR}.deb" apt-repo/pool/main/l/${{ env.BINARY_NAME }}/

    - name: Generate APT repository metadata
      run: |
        cd apt-repo
        
        # Create Release file for the repository
        cat > Release << EOF
        Origin: ${{ github.repository_owner }}
        Label: ${{ github.repository_owner }}'s Repository
        Suite: stable
        Codename: stable
        Components: main
        Architectures: amd64 arm64
        Description: APT repository for ${{ github.repository_owner }}'s packages
        EOF

        # Create Packages file
        mkdir -p dists/stable/main/binary-amd64
        dpkg-scanpackages pool/main > dists/stable/main/binary-amd64/Packages
        gzip -k dists/stable/main/binary-amd64/Packages

        # Create Release file with checksums
        cd dists/stable
        apt-ftparchive release . > Release

    - name: Upload to APT repository
      if: env.APT_REPO_TOKEN != ''
      run: |
        # This would typically sync to your APT repository
        echo "APT repository files created in apt-repo/"
        ls -la apt-repo/
        # Example: rsync or upload to your APT server
        # rsync -av apt-repo/ user@your-server:/var/www/apt/
      env:
        APT_REPO_TOKEN: ${{ secrets.APT_REPO_TOKEN }}

    - name: Upload APT artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: |
          *.deb
          apt-repo/

  # Create winget manifest
  winget:
    name: Update Winget Package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Windows binary for hash
      run: |
        curl -L -o ${{ env.BINARY_NAME }}.exe \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-windows-amd64.exe"

    - name: Calculate SHA256
      id: hash
      run: |
        HASH=$(sha256sum ${{ env.BINARY_NAME }}.exe | cut -d' ' -f1)
        echo "sha256=$HASH" >> $GITHUB_OUTPUT

    - name: Submit to Winget
      uses: vedantmgoyal2009/winget-releaser@v2
      with:
        identifier: ${{ github.repository_owner }}.${{ env.BINARY_NAME }}
        version: ${{ steps.version.outputs.version }}
        installers-regex: '\.exe$'
        token: ${{ secrets.WINGET_TOKEN }}

  # Publish to Docker Hub (bonus)
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ github.repository_owner }}/${{ env.BINARY_NAME }}:latest
          ${{ github.repository_owner }}/${{ env.BINARY_NAME }}:${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}