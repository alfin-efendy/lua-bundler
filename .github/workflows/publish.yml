name: Package Publishing

on:
  release:
    types: [published]

env:
  BINARY_NAME: lua-bundler

jobs:
  # Publish to Homebrew
  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: ${{ env.BINARY_NAME }}
        formula-path: Formula/${{ env.BINARY_NAME }}.rb
        homebrew-tap: alfin-efendy/homebrew-tap
        base-branch: main
        download-url: https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-darwin-amd64
        commit-message: |
          ${{ env.BINARY_NAME }} ${{ github.event.release.tag_name }}

          Created by ${{ github.event.sender.login }}
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  # Trigger APT repository update (handled by separate workflow)
  trigger-apt:
    name: Trigger APT Repository Update
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Trigger APT repository workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'apt-repository.yml'
          });
          
    - name: APT Repository Info
      run: |
        echo "## ðŸ“¦ APT Repository" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY  
        echo "APT repository will be updated automatically." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation:**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo 'echo "deb [trusted=yes] https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ stable main" | sudo tee /etc/apt/sources.list.d/lua-bundler.list' >> $GITHUB_STEP_SUMMARY
        echo 'sudo apt update && sudo apt install lua-bundler' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Create winget manifest
  winget:
    name: Update Winget Package
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Windows binary for hash
      run: |
        curl -L -o ${{ env.BINARY_NAME }}.exe \
          "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/${{ env.BINARY_NAME }}-windows-amd64.exe"

    - name: Calculate SHA256
      id: hash
      run: |
        HASH=$(sha256sum ${{ env.BINARY_NAME }}.exe | cut -d' ' -f1)
        echo "sha256=$HASH" >> $GITHUB_OUTPUT

    - name: Submit to Winget
      uses: vedantmgoyal2009/winget-releaser@v2
      with:
        identifier: ${{ github.repository_owner }}.${{ env.BINARY_NAME }}
        version: ${{ steps.version.outputs.version }}
        installers-regex: '\.exe$'
        token: ${{ secrets.WINGET_TOKEN }}

  # Publish to Docker Hub (bonus)
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version
      id: version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ github.repository_owner }}/${{ env.BINARY_NAME }}:latest
          ${{ github.repository_owner }}/${{ env.BINARY_NAME }}:${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}