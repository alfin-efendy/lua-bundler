name: Semantic Release

on:
  push:
    branches: 
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  actions: write
  checks: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.semantic.outputs.new-release-git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/exec conventional-changelog-conventionalcommits

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Run tests
        run: |
          go test ./... -v

      - name: Build binary
        run: |
          go build -v -o lua-bundler .

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: semantic-release-bot
          GIT_AUTHOR_EMAIL: semantic-release-bot@martynus.net
          GIT_COMMITTER_NAME: semantic-release-bot
          GIT_COMMITTER_EMAIL: semantic-release-bot@martynus.net
        run: npx semantic-release

  build-and-release:
    name: Build and Release Binaries  
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=${{ needs.release.outputs.new-release-version }}
          BINARY_NAME="lua-bundler"
          
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="lua-bundler.exe"
          fi
          
          # Build with version information
          go build \
            -ldflags="-X 'main.version=${VERSION}' -X 'main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'main.gitCommit=$(git rev-parse HEAD)'" \
            -o "${BINARY_NAME}" \
            .
          
          # Create archive
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "lua-bundler-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip" "${BINARY_NAME}" README.md LICENSE
            echo "ASSET_NAME=lua-bundler-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip" >> $GITHUB_ENV
          else
            tar -czf "lua-bundler-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "${BINARY_NAME}" README.md LICENSE
            echo "ASSET_NAME=lua-bundler-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  # Trigger other workflows after successful release
  trigger-publish:
    name: Trigger Publishing Workflows
    needs: [release, build-and-release]
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Homebrew publish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'homebrew-publish.yml',
              ref: 'main',
              inputs: {
                version: '${{ needs.release.outputs.new-release-version }}',
                tag: '${{ needs.release.outputs.new-release-git-tag }}'
              }
            });

      - name: Trigger APT publish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'apt-publish.yml', 
              ref: 'main',
              inputs: {
                version: '${{ needs.release.outputs.new-release-version }}',
                tag: '${{ needs.release.outputs.new-release-git-tag }}'
              }
            });

      - name: Trigger Winget publish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'winget-publish.yml',
              ref: 'main', 
              inputs: {
                version: '${{ needs.release.outputs.new-release-version }}',
                tag: '${{ needs.release.outputs.new-release-git-tag }}'
              }
            });