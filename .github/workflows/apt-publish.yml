name: APT Publish

on:
  repository_dispatch:
    types: [apt-publish]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish'
        required: true
        default: 'v1.0.0'

env:
  BINARY_NAME: lua-bundler

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-deb-and-publish:
    name: Build Debian Package and Update APT Repository
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && !github.event.release.prerelease || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    # Checkout gh-pages branch for APT repository
    - name: Checkout gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: apt-repo
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup APT repository structure
      run: |
        cd apt-repo
        mkdir -p {dists/stable/main/binary-amd64,dists/stable/main/binary-arm64,pool/main/l/${{ env.BINARY_NAME }}}
        
        # Create basic structure if not exists
        if [ ! -f "dists/stable/Release" ]; then
          mkdir -p dists/stable/main/binary-{amd64,arm64}
        fi

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Download release binaries
      run: |
        if [ "${{ github.event_name }}" = "release" ] && [ -n "${{ github.event.release.tag_name }}" ]; then
          echo "📥 Downloading release binaries from tag: ${{ github.event.release.tag_name }}"
          TAG="${{ github.event.release.tag_name }}"
          
          # Download Linux AMD64 binary from release
          echo "Downloading AMD64 binary..."
          if ! curl -f -L -o ${{ env.BINARY_NAME }}-amd64 \
            "https://github.com/${{ github.repository }}/releases/download/${TAG}/${{ env.BINARY_NAME }}-linux-amd64"; then
            echo "❌ ERROR: Failed to download AMD64 binary from release!"
            echo "Please ensure the release has ${{ env.BINARY_NAME }}-linux-amd64 asset"
            exit 1
          fi
          
          # Download Linux ARM64 binary from release
          echo "Downloading ARM64 binary..."
          if ! curl -f -L -o ${{ env.BINARY_NAME }}-arm64 \
            "https://github.com/${{ github.repository }}/releases/download/${TAG}/${{ env.BINARY_NAME }}-linux-arm64"; then
            echo "❌ ERROR: Failed to download ARM64 binary from release!"
            echo "Please ensure the release has ${{ env.BINARY_NAME }}-linux-arm64 asset"
            exit 1
          fi
          
          echo "✅ Successfully downloaded both binaries"
        else
          echo "⚠️ Not triggered by release, building binaries locally..."
          # Build locally for manual workflow dispatch
          echo "Building AMD64..."
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }}-amd64 .
          echo "Building ARM64..."
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }}-arm64 .
        fi
        
        # Verify binaries exist and are valid
        echo ""
        echo "🔍 Verifying downloaded binaries..."
        for binary in ${{ env.BINARY_NAME }}-amd64 ${{ env.BINARY_NAME }}-arm64; do
          if [ ! -f "$binary" ]; then
            echo "❌ ERROR: Binary $binary does not exist!"
            exit 1
          fi
          
          SIZE=$(stat -c%s "$binary" 2>/dev/null || stat -f%z "$binary" 2>/dev/null || echo "0")
          SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
          
          if [ "$SIZE" -lt 100000 ]; then
            echo "❌ ERROR: Binary $binary is too small ($SIZE bytes)!"
            echo "First 100 bytes of file:"
            head -c 100 "$binary" | od -c
            exit 1
          fi
          
          echo "✅ $binary: ${SIZE_MB} MB ($SIZE bytes)"
          file "$binary"
        done
        
        chmod +x ${{ env.BINARY_NAME }}-*
        echo ""
        echo "📦 Final binary list:"
        ls -lh ${{ env.BINARY_NAME }}-*

    - name: Get version
      id: version
      run: |
        # Get version from release tag or latest git tag
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          # For workflow_dispatch, get latest tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        fi
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        
        # Validate version is not empty
        if [ -z "$VERSION" ] || [ "$VERSION" = "" ]; then
          echo "Error: Version is empty, using default"
          VERSION="1.0.0"
        fi
        
        echo "Detected version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create AMD64 Debian package
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "📦 Creating AMD64 Debian package for version: $VERSION"
        
        if [ -z "$VERSION" ]; then
          echo "❌ ERROR: Version is empty!"
          exit 1
        fi
        
        PKG_DIR="${{ env.BINARY_NAME }}_${VERSION}_amd64"
        echo "Package directory: $PKG_DIR"
        
        mkdir -p "$PKG_DIR/DEBIAN"
        mkdir -p "$PKG_DIR/usr/bin"
        mkdir -p "$PKG_DIR/usr/share/man/man1"
        mkdir -p "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}"

        # Copy AMD64 binary
        echo "Copying binary..."
        cp ${{ env.BINARY_NAME }}-amd64 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"
        chmod 755 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"
        
        # Verify copied binary
        COPIED_SIZE=$(stat -c%s "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}")
        COPIED_SIZE_MB=$(echo "scale=2; $COPIED_SIZE / 1024 / 1024" | bc)
        echo "Copied binary size: ${COPIED_SIZE_MB} MB"
        
        if [ "$COPIED_SIZE" -lt 100000 ]; then
          echo "❌ ERROR: Copied binary is suspiciously small!"
          exit 1
        fi

        # Create control file (no leading whitespace for heredoc)
        cat > "$PKG_DIR/DEBIAN/control" << 'CONTROL_EOF'
        Package: lua-bundler
        Version: VERSION_PLACEHOLDER
        Section: utils
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.17)
        Maintainer: MAINTAINER_PLACEHOLDER
        Description: Lua script bundler for Roblox development
         A powerful tool for bundling Lua scripts with automatic dependency resolution.
         Specifically designed for Roblox script development with support for both
         local requires and HTTP loadstring patterns.
        Homepage: HOMEPAGE_PLACEHOLDER
        CONTROL_EOF

        # Replace placeholders
        sed -i "s|VERSION_PLACEHOLDER|${{ steps.version.outputs.version }}|g" "$PKG_DIR/DEBIAN/control"
        sed -i "s|MAINTAINER_PLACEHOLDER|${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>|g" "$PKG_DIR/DEBIAN/control"
        sed -i "s|HOMEPAGE_PLACEHOLDER|https://github.com/${{ github.repository }}|g" "$PKG_DIR/DEBIAN/control"

        # Create postinst script
        cat > "$PKG_DIR/DEBIAN/postinst" << 'POSTINST_EOF'
        #!/bin/bash
        set -e
        chmod +x /usr/bin/lua-bundler
        echo "✅ lua-bundler installed successfully!"
        echo "Usage: lua-bundler --entry main.lua --output bundle.lua"
        POSTINST_EOF
        chmod 755 "$PKG_DIR/DEBIAN/postinst"

        # Create copyright file
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright" << 'COPYRIGHT_EOF'
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Upstream-Name: lua-bundler
        Source: SOURCE_PLACEHOLDER
        
        Files: *
        Copyright: YEAR_PLACEHOLDER OWNER_PLACEHOLDER
        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a
         copy of this software and associated documentation files (the "Software"),
         to deal in the Software without restriction, including without limitation
         the rights to use, copy, modify, merge, publish, distribute, sublicense,
         and/or sell copies of the Software, and to permit persons to whom the
         Software is furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included
         in all copies or substantial portions of the Software.
        COPYRIGHT_EOF

        # Replace placeholders in copyright
        sed -i "s|SOURCE_PLACEHOLDER|https://github.com/${{ github.repository }}|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright"
        sed -i "s|YEAR_PLACEHOLDER|$(date +%Y)|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright"
        sed -i "s|OWNER_PLACEHOLDER|${{ github.repository_owner }}|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/copyright"

        # Create changelog
        cat > "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian" << 'CHANGELOG_EOF'
        lua-bundler (VERSION_PLACEHOLDER) stable; urgency=medium
        
          * Release VERSION_PLACEHOLDER
          * See RELEASE_URL_PLACEHOLDER
        
         -- MAINTAINER_PLACEHOLDER  DATE_PLACEHOLDER
        CHANGELOG_EOF

        # Replace placeholders in changelog
        sed -i "s|VERSION_PLACEHOLDER|${{ steps.version.outputs.version }}|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"
        sed -i "s|RELEASE_URL_PLACEHOLDER|https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }}|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"
        sed -i "s|MAINTAINER_PLACEHOLDER|${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"
        sed -i "s|DATE_PLACEHOLDER|$(date -R)|g" "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"

        # Compress changelog
        gzip -9 "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/changelog.Debian"

        echo ""
        echo "📋 Package contents:"
        du -sh "$PKG_DIR"
        find "$PKG_DIR" -type f -exec ls -lh {} \;

        # Build AMD64 package
        echo ""
        echo "🔨 Building .deb package..."
        dpkg-deb --build --root-owner-group "$PKG_DIR"
        
        # Verify package
        DEB_FILE="${{ env.BINARY_NAME }}_${VERSION}_amd64.deb"
        if [ ! -f "$DEB_FILE" ]; then
          echo "❌ ERROR: .deb file was not created!"
          exit 1
        fi
        
        DEB_SIZE=$(stat -c%s "$DEB_FILE")
        DEB_SIZE_MB=$(echo "scale=2; $DEB_SIZE / 1024 / 1024" | bc)
        
        if [ "$DEB_SIZE" -lt 50000 ]; then
          echo "❌ ERROR: .deb package is too small ($DEB_SIZE bytes)!"
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE"
          exit 1
        fi
        
        echo "✅ AMD64 package created: ${DEB_SIZE_MB} MB"
        dpkg-deb --info "$DEB_FILE"

    - name: Create ARM64 Debian package
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "📦 Creating ARM64 Debian package for version: $VERSION"
        
        if [ -z "$VERSION" ]; then
          echo "❌ ERROR: Version is empty for ARM64 package!"
          exit 1
        fi
        
        PKG_DIR="${{ env.BINARY_NAME }}_${VERSION}_arm64"
        echo "Package directory: $PKG_DIR"
        
        mkdir -p "$PKG_DIR/DEBIAN"
        mkdir -p "$PKG_DIR/usr/bin"
        mkdir -p "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}"

        # Copy ARM64 binary
        echo "Copying binary..."
        cp ${{ env.BINARY_NAME }}-arm64 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"
        chmod 755 "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}"
        
        # Verify copied binary
        COPIED_SIZE=$(stat -c%s "$PKG_DIR/usr/bin/${{ env.BINARY_NAME }}")
        COPIED_SIZE_MB=$(echo "scale=2; $COPIED_SIZE / 1024 / 1024" | bc)
        echo "Copied binary size: ${COPIED_SIZE_MB} MB"
        
        if [ "$COPIED_SIZE" -lt 100000 ]; then
          echo "❌ ERROR: Copied ARM64 binary is suspiciously small!"
          exit 1
        fi

        # Create control file (ARM64)
        cat > "$PKG_DIR/DEBIAN/control" << 'CONTROL_EOF'
        Package: lua-bundler
        Version: VERSION_PLACEHOLDER
        Section: utils
        Priority: optional
        Architecture: arm64
        Depends: libc6 (>= 2.17)
        Maintainer: MAINTAINER_PLACEHOLDER
        Description: Lua script bundler for Roblox development
         A powerful tool for bundling Lua scripts with automatic dependency resolution.
         Specifically designed for Roblox script development with support for both
         local requires and HTTP loadstring patterns.
        Homepage: HOMEPAGE_PLACEHOLDER
        CONTROL_EOF

        # Replace placeholders
        sed -i "s|VERSION_PLACEHOLDER|${{ steps.version.outputs.version }}|g" "$PKG_DIR/DEBIAN/control"
        sed -i "s|MAINTAINER_PLACEHOLDER|${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>|g" "$PKG_DIR/DEBIAN/control"
        sed -i "s|HOMEPAGE_PLACEHOLDER|https://github.com/${{ github.repository }}|g" "$PKG_DIR/DEBIAN/control"

        # Create postinst script
        cat > "$PKG_DIR/DEBIAN/postinst" << 'POSTINST_EOF'
        #!/bin/bash
        set -e
        chmod +x /usr/bin/lua-bundler
        echo "✅ lua-bundler installed successfully!"
        echo "Usage: lua-bundler --entry main.lua --output bundle.lua"
        POSTINST_EOF
        chmod 755 "$PKG_DIR/DEBIAN/postinst"

        # Copy documentation from AMD64 package
        cp -r ${{ env.BINARY_NAME }}_${{ steps.version.outputs.version }}_amd64/usr/share/doc/${{ env.BINARY_NAME }}/* \
           "$PKG_DIR/usr/share/doc/${{ env.BINARY_NAME }}/"

        echo ""
        echo "📋 Package contents:"
        du -sh "$PKG_DIR"
        find "$PKG_DIR" -type f -exec ls -lh {} \;

        # Build ARM64 package
        echo ""
        echo "🔨 Building ARM64 .deb package..."
        dpkg-deb --build --root-owner-group "$PKG_DIR"
        
        # Verify package
        DEB_FILE="${{ env.BINARY_NAME }}_${VERSION}_arm64.deb"
        if [ ! -f "$DEB_FILE" ]; then
          echo "❌ ERROR: ARM64 .deb file was not created!"
          exit 1
        fi
        
        DEB_SIZE=$(stat -c%s "$DEB_FILE")
        DEB_SIZE_MB=$(echo "scale=2; $DEB_SIZE / 1024 / 1024" | bc)
        
        if [ "$DEB_SIZE" -lt 50000 ]; then
          echo "❌ ERROR: ARM64 .deb package is too small ($DEB_SIZE bytes)!"
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE"
          exit 1
        fi
        
        echo "✅ ARM64 package created: ${DEB_SIZE_MB} MB"
        dpkg-deb --info "$DEB_FILE"

    - name: Move packages to repository
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "📦 Verifying packages before moving..."
        # Verify packages exist and are valid
        for arch in amd64 arm64; do
          DEB_FILE="${{ env.BINARY_NAME }}_${VERSION}_${arch}.deb"
          
          if [ ! -f "$DEB_FILE" ]; then
            echo "❌ ERROR: Package $DEB_FILE does not exist!"
            exit 1
          fi
          
          SIZE=$(stat -c%s "$DEB_FILE")
          SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
          
          if [ "$SIZE" -lt 50000 ]; then
            echo "❌ ERROR: Package $DEB_FILE is too small: $SIZE bytes"
            exit 1
          fi
          
          echo "✅ $DEB_FILE: ${SIZE_MB} MB"
        done
        
        # Move packages to pool
        echo ""
        echo "📁 Moving packages to repository pool..."
        mv -v ${{ env.BINARY_NAME }}_${VERSION}_amd64.deb \
           apt-repo/pool/main/l/${{ env.BINARY_NAME }}/
        mv -v ${{ env.BINARY_NAME }}_${VERSION}_arm64.deb \
           apt-repo/pool/main/l/${{ env.BINARY_NAME }}/
        
        # Verify packages were moved successfully
        echo ""
        echo "📋 Packages in repository:"
        ls -lh apt-repo/pool/main/l/${{ env.BINARY_NAME }}/ | grep "${VERSION}"

    - name: Generate repository metadata
      run: |
        cd apt-repo

        # Install required tools
        sudo apt-get update
        sudo apt-get install -y apt-utils gpg

        # Remove existing Packages files to avoid conflicts
        rm -f dists/stable/main/binary-amd64/Packages*
        rm -f dists/stable/main/binary-arm64/Packages*
        
        # Generate Packages files
        dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
        dpkg-scanpackages --arch arm64 pool/ > dists/stable/main/binary-arm64/Packages
        
        # Compress Packages files (force overwrite if exists)
        gzip -9f dists/stable/main/binary-amd64/Packages
        gzip -9f dists/stable/main/binary-arm64/Packages
        
        # Also create uncompressed versions for compatibility
        gunzip -c dists/stable/main/binary-amd64/Packages.gz > dists/stable/main/binary-amd64/Packages
        gunzip -c dists/stable/main/binary-arm64/Packages.gz > dists/stable/main/binary-arm64/Packages

        # Create Release file
        cat > dists/stable/Release << EOF
        Origin: ${{ github.repository_owner }}
        Label: ${{ github.repository_owner }}'s APT Repository
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: amd64 arm64
        Components: main
        Description: APT repository for ${{ env.BINARY_NAME }} and other packages
        Date: $(date -Ru)
        EOF

        # Generate checksums for Release file
        cd dists/stable
        
        # Generate proper formatted hashes with file sizes
        echo "MD5Sum:" >> Release
        find . -name "Packages*" -type f -exec sh -c '
          for file; do
            md5=$(md5sum "$file" | cut -d" " -f1)
            size=$(stat -c%s "$file")
            path=${file#./}
            printf " %s %16s %s\n" "$md5" "$size" "$path"
          done
        ' _ {} + >> Release
        
        echo "SHA1:" >> Release  
        find . -name "Packages*" -type f -exec sh -c '
          for file; do
            sha1=$(sha1sum "$file" | cut -d" " -f1)
            size=$(stat -c%s "$file") 
            path=${file#./}
            printf " %s %16s %s\n" "$sha1" "$size" "$path"
          done
        ' _ {} + >> Release
        
        echo "SHA256:" >> Release
        find . -name "Packages*" -type f -exec sh -c '
          for file; do
            sha256=$(sha256sum "$file" | cut -d" " -f1)
            size=$(stat -c%s "$file")
            path=${file#./}
            printf " %s %16s %s\n" "$sha256" "$size" "$path"
          done  
        ' _ {} + >> Release

    - name: Create repository index page
      run: |
        cd apt-repo
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{{ env.BINARY_NAME }} APT Repository</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .header { text-align: center; margin-bottom: 40px; }
                .install-box { background: #f6f8fa; padding: 20px; border-radius: 6px; margin: 20px 0; }
                .install-box code { background: #fff; padding: 2px 6px; border-radius: 3px; font-family: 'SF Mono', Consolas, monospace; }
                .package-list { margin: 20px 0; }
                .package-item { padding: 10px; border: 1px solid #e1e4e8; border-radius: 6px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>🏗️ {{ env.BINARY_NAME }} APT Repository</h1>
                <p>Debian/Ubuntu packages for lua-bundler</p>
            </div>

            <div class="install-box">
                <h2>📦 Installation</h2>
                <p><strong>Step 1:</strong> Add the repository</p>
                <code>echo "deb [trusted=yes] https://{{ github.repository_owner }}.github.io/{{ github.event.repository.name }}/ stable main" | sudo tee /etc/apt/sources.list.d/lua-bundler.list</code>
                
                <p><strong>Step 2:</strong> Update package list</p>
                <code>sudo apt update</code>
                
                <p><strong>Step 3:</strong> Install lua-bundler</p>
                <code>sudo apt install lua-bundler</code>
            </div>

            <div class="package-list">
                <h2>📋 Available Packages</h2>
                <div class="package-item">
                    <h3>lua-bundler</h3>
                    <p>Lua script bundler for Roblox development</p>
                    <p><strong>Architectures:</strong> amd64, arm64</p>
                    <p><strong>Latest Version:</strong> {{ steps.version.outputs.version }}</p>
                </div>
            </div>

            <div class="install-box">
                <h2>🔗 Links</h2>
                <ul>
                    <li><a href="https://github.com/{{ github.repository }}">GitHub Repository</a></li>
                    <li><a href="https://github.com/{{ github.repository }}/releases">Releases</a></li>
                    <li><a href="https://github.com/{{ github.repository }}/issues">Issues</a></li>
                </ul>
            </div>

            <div class="install-box">
                <h2>📁 Repository Structure</h2>
                <ul>
                    <li><a href="dists/">dists/</a> - Distribution metadata</li>
                    <li><a href="pool/">pool/</a> - Package files</li>
                </ul>
            </div>

            <footer style="text-align: center; margin-top: 40px; color: #666;">
                <p>Updated: $(date)</p>
                <p>Generated automatically by GitHub Actions</p>
            </footer>
        </body>
        </html>
        EOF

        # Replace template variables
        sed -i "s|{{ env.BINARY_NAME }}|${{ env.BINARY_NAME }}|g" index.html
        sed -i "s|{{ github.repository_owner }}|${{ github.repository_owner }}|g" index.html
        sed -i "s|{{ github.event.repository.name }}|${{ github.event.repository.name }}|g" index.html
        sed -i "s|{{ github.repository }}|${{ github.repository }}|g" index.html
        sed -i "s|{{ steps.version.outputs.version }}|${{ steps.version.outputs.version }}|g" index.html

    - name: Commit and push to gh-pages
      run: |
        cd apt-repo
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Configure git to use token
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Add all files
        git add -A
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update APT repository - Release ${{ github.event.release.tag_name }}"
          git push
        fi

    - name: Enable GitHub Pages
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.repos.createPagesSite({
              owner: context.repo.owner,
              repo: context.repo.repo,
              source: {
                branch: 'gh-pages',
                path: '/'
              }
            });
          } catch (error) {
            // Pages might already be enabled
            console.log('GitHub Pages might already be enabled:', error.message);
          }

    - name: Summary
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "## 📦 APT Repository Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "**Release:** [${{ github.event.release.tag_name }}](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📥 Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo '# Add repository' >> $GITHUB_STEP_SUMMARY
        echo 'echo "deb [trusted=yes] https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ stable main" | sudo tee /etc/apt/sources.list.d/lua-bundler.list' >> $GITHUB_STEP_SUMMARY
        echo '' >> $GITHUB_STEP_SUMMARY
        echo '# Update and install' >> $GITHUB_STEP_SUMMARY
        echo 'sudo apt update' >> $GITHUB_STEP_SUMMARY
        echo 'sudo apt install lua-bundler' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📦 Packages Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show package details with sizes
        for arch in amd64 arm64; do
          DEB_FILE="apt-repo/pool/main/l/${{ env.BINARY_NAME }}/${{ env.BINARY_NAME }}_${VERSION}_${arch}.deb"
          if [ -f "$DEB_FILE" ]; then
            SIZE=$(stat -c%s "$DEB_FILE")
            SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
            
            echo "#### 📦 \`lua-bundler_${VERSION}_${arch}.deb\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Size:** ${SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
            echo "- **Architecture:** ${arch}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show package info
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>Package Info</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            dpkg-deb --info "$DEB_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "### 📋 Package Contents (AMD64)" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        dpkg-deb --contents "apt-repo/pool/main/l/${{ env.BINARY_NAME }}/${{ env.BINARY_NAME }}_${VERSION}_amd64.deb" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY