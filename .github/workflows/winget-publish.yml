name: Publish to Winget

on:
  repository_dispatch:
    types: [winget-publish]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish'
        required: true
        default: 'v1.0.0'

env:
  BINARY_NAME: lua-bundler
  PACKAGE_ID: alfin-efendy.lua-bundler

jobs:
  update-winget-manifest:
    name: Update Winget Manifest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Get release info
      id: release_info
      run: |
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          TAG="${{ github.event.client_payload.tag }}"
        else
          TAG="${{ github.event.inputs.tag }}"
        fi
        
        VERSION="${TAG#v}"  # Remove 'v' prefix
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Windows binaries and get checksums
      id: windows_assets
      run: |
        # Get release info from GitHub API
        RELEASE_DATA=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.release_info.outputs.tag }}")
        
        # Extract Windows download URLs
        WIN_AMD64_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | contains("windows-amd64.exe")) | .browser_download_url')
        WIN_ARM64_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | contains("windows-arm64.exe")) | .browser_download_url')
        
        # Download and calculate checksums
        echo "Downloading Windows binaries for checksum calculation..."
        
        curl -L -o windows-amd64.exe "$WIN_AMD64_URL"
        curl -L -o windows-arm64.exe "$WIN_ARM64_URL"
        
        WIN_AMD64_SHA256=$(sha256sum windows-amd64.exe | cut -d' ' -f1)
        WIN_ARM64_SHA256=$(sha256sum windows-arm64.exe | cut -d' ' -f1)
        
        echo "win_amd64_url=$WIN_AMD64_URL" >> $GITHUB_OUTPUT
        echo "win_arm64_url=$WIN_ARM64_URL" >> $GITHUB_OUTPUT
        echo "win_amd64_sha256=$WIN_AMD64_SHA256" >> $GITHUB_OUTPUT
        echo "win_arm64_sha256=$WIN_ARM64_SHA256" >> $GITHUB_OUTPUT

    - name: Create Winget manifest files
      run: |
        # Create directory structure for manifests
        MANIFEST_DIR="winget-manifests/manifests/a/alfin-efendy/${{ env.BINARY_NAME }}/${{ steps.release_info.outputs.version }}"
        mkdir -p "$MANIFEST_DIR"
        
        # Create version manifest
        cat > "$MANIFEST_DIR/alfin-efendy.${{ env.BINARY_NAME }}.yaml" << EOF
        # Created with Komac v1.11.0
        # yaml-language-server: \$schema=https://aka.ms/winget-manifest.version.1.5.0.schema.json

        PackageIdentifier: ${{ env.PACKAGE_ID }}
        PackageVersion: ${{ steps.release_info.outputs.version }}
        DefaultLocale: en-US
        ManifestType: version
        ManifestVersion: 1.5.0
        EOF
        
        # Create default locale manifest
        cat > "$MANIFEST_DIR/alfin-efendy.${{ env.BINARY_NAME }}.locale.en-US.yaml" << EOF
        # Created with Komac v1.11.0  
        # yaml-language-server: \$schema=https://aka.ms/winget-manifest.defaultLocale.1.5.0.schema.json

        PackageIdentifier: ${{ env.PACKAGE_ID }}
        PackageVersion: ${{ steps.release_info.outputs.version }}
        PackageLocale: en-US
        Publisher: ${{ github.repository_owner }}
        PublisherUrl: https://github.com/${{ github.repository_owner }}
        PackageName: lua-bundler
        PackageUrl: https://github.com/${{ github.repository }}
        License: MIT
        LicenseUrl: https://github.com/${{ github.repository }}/blob/main/LICENSE
        ShortDescription: Lua script bundler for Roblox development
        Description: A tool for bundling Lua scripts with dependency resolution, specifically designed for Roblox script development. Supports both local requires and HTTP loadstring patterns.
        Moniker: lua-bundler
        Tags:
        - lua
        - bundler
        - roblox
        - script
        - development
        ReleaseNotes: |
          Release ${{ steps.release_info.outputs.tag }}
          
          See the full changelog at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag }}
        ReleaseNotesUrl: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag }}
        ManifestType: defaultLocale
        ManifestVersion: 1.5.0
        EOF
        
        # Create installer manifest
        cat > "$MANIFEST_DIR/alfin-efendy.${{ env.BINARY_NAME }}.installer.yaml" << EOF
        # Created with Komac v1.11.0
        # yaml-language-server: \$schema=https://aka.ms/winget-manifest.installer.1.5.0.schema.json

        PackageIdentifier: ${{ env.PACKAGE_ID }}
        PackageVersion: ${{ steps.release_info.outputs.version }}
        InstallerType: portable
        Commands:
        - lua-bundler
        Installers:
        - Architecture: x64
          InstallerUrl: ${{ steps.windows_assets.outputs.win_amd64_url }}
          InstallerSha256: ${{ steps.windows_assets.outputs.win_amd64_sha256 }}
        - Architecture: arm64  
          InstallerUrl: ${{ steps.windows_assets.outputs.win_arm64_url }}
          InstallerSha256: ${{ steps.windows_assets.outputs.win_arm64_sha256 }}
        ManifestType: installer
        ManifestVersion: 1.5.0
        EOF

    - name: Upload manifest artifacts
      uses: actions/upload-artifact@v4
      with:
        name: winget-manifests-${{ steps.release_info.outputs.version }}
        path: winget-manifests/
        retention-days: 90

    - name: Create submission instructions
      run: |
        cat > winget-manifests/SUBMIT.md << 'EOF'
        # 📦 Winget Package Submission Instructions
        
        ## Automated Submission (Recommended)
        
        Use the official WinGet CLI tool to submit:
        
        ```powershell
        # Install wingetcreate if not already installed
        winget install wingetcreate
        
        # Submit the package (this will create a PR automatically)
        wingetcreate submit \
          --token YOUR_GITHUB_TOKEN \
          manifests/a/alfin-efendy/${{ env.BINARY_NAME }}/${{ steps.release_info.outputs.version }}/
        ```
        
        ## Manual Submission
        
        1. Fork [microsoft/winget-pkgs](https://github.com/microsoft/winget-pkgs)
        
        2. Clone your fork:
           ```bash
           git clone https://github.com/YOUR_USERNAME/winget-pkgs.git
           cd winget-pkgs
           ```
        
        3. Create a new branch:
           ```bash
           git checkout -b add-lua-bundler-${{ steps.release_info.outputs.version }}
           ```
        
        4. Copy the manifest files from this artifact to your clone:
           ```bash
           cp -r path/to/manifests/a/alfin-efendy/${{ env.BINARY_NAME }}/${{ steps.release_info.outputs.version }} \
                 manifests/a/alfin-efendy/${{ env.BINARY_NAME }}/
           ```
        
        5. Commit and push:
           ```bash
           git add .
           git commit -m "Add ${{ env.PACKAGE_ID }} version ${{ steps.release_info.outputs.version }}"
           git push origin add-lua-bundler-${{ steps.release_info.outputs.version }}
           ```
        
        6. Create a Pull Request on GitHub to [microsoft/winget-pkgs](https://github.com/microsoft/winget-pkgs)
        
        ## Package Information
        
        - **Package ID**: ${{ env.PACKAGE_ID }}
        - **Version**: ${{ steps.release_info.outputs.version }}
        - **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag }}
        
        ## Checksums
        
        - **Windows AMD64**: ${{ steps.windows_assets.outputs.win_amd64_sha256 }}
        - **Windows ARM64**: ${{ steps.windows_assets.outputs.win_arm64_sha256 }}
        
        EOF

    - name: Summary
      run: |
        echo "## 📦 Winget Manifests Generated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Package Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Package ID**: ${{ env.PACKAGE_ID }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.release_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.release_info.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Generated Files" >> $GITHUB_STEP_SUMMARY
        echo "- \`alfin-efendy.${{ env.BINARY_NAME }}.yaml\` - Version manifest" >> $GITHUB_STEP_SUMMARY
        echo "- \`alfin-efendy.${{ env.BINARY_NAME }}.locale.en-US.yaml\` - Locale manifest" >> $GITHUB_STEP_SUMMARY
        echo "- \`alfin-efendy.${{ env.BINARY_NAME }}.installer.yaml\` - Installer manifest" >> $GITHUB_STEP_SUMMARY
        echo "- \`SUBMIT.md\` - Submission instructions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "The manifest files have been uploaded as workflow artifacts." >> $GITHUB_STEP_SUMMARY
        echo "Download them from the **Artifacts** section above." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Option 1: Automated Submission (Recommended)**" >> $GITHUB_STEP_SUMMARY
        echo '```powershell' >> $GITHUB_STEP_SUMMARY
        echo "wingetcreate submit --token YOUR_TOKEN manifests/..." >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Option 2: Manual Submission**" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Fork [microsoft/winget-pkgs](https://github.com/microsoft/winget-pkgs)" >> $GITHUB_STEP_SUMMARY
        echo "3. Copy manifest files to your fork" >> $GITHUB_STEP_SUMMARY
        echo "4. Create a Pull Request" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📖 See \`SUBMIT.md\` in the artifacts for detailed instructions." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Checksums" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows AMD64**: \`${{ steps.windows_assets.outputs.win_amd64_sha256 }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows ARM64**: \`${{ steps.windows_assets.outputs.win_arm64_sha256 }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Useful Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Microsoft Winget Packages](https://github.com/microsoft/winget-pkgs)" >> $GITHUB_STEP_SUMMARY
        echo "- [Winget Create Tool](https://github.com/microsoft/winget-create)" >> $GITHUB_STEP_SUMMARY
        echo "- [Submission Guidelines](https://github.com/microsoft/winget-pkgs/blob/master/CONTRIBUTING.md)" >> $GITHUB_STEP_SUMMARY